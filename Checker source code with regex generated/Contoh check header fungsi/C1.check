// Soal 1, writing oddy
// Melakukan pengecekan :
// 1. Private attribute : Name, Size, MaxSize, FriendOf
// 2. 5 sekawan
// 3. operator overloading
class PersonCheck {
	format : source {
		function block : "{" "}"
		single comment : "//"
		multi comment : "/*" "*/"
	}
	
	// private attribute
	P 1 {
		exist regex "private: char* Name";
		exist regex "private: char[] Name"
	}
	P 2 {exist regex "private: int Size"}
	P 3 {exist regex "private: const int MaxSize"}
	P 4 {exist regex "private: Person* FriendOf"}
	// 5 sekawan
	P 5 {exist regex "Person()"}
	P 6 {exist regex "(.*)Person\\(string(.*),(\\s*)int(.*),(\\s*)Person*(.*)\\)(.*)"}
	P 7 {exist regex "Person(constPerson& )"}
	P 8 {exist regex "~Person()"}
	P 9 {exist regex "Person& operator=(const Person& )"}
	// operator overloading
	P 10 {exist regex "(.*)friend ostream& operator<<(\\s*)\\((\\s*)ostream&(.*),(\\s*)(.*)Person&(.*)\\)(.*)"}
	P 11 {exist regex "(.*)friend istream& operator>>(\\s*)\\((\\s*)istream&(.*),(\\s*)(.*)Person&(.*)\\)(.*)"}
	
	check : source {
		P [1] check all [".h"] score 5;
		P [2] check all [".h"] score 5;
		P [3] check all [".h"] score 5;
		P [4] check all [".h"] score 5;
		P [5] check all [".h"] score 10;
		P [6] check all [".h"] score 10;
		P [7] check all [".h"] score 10;
		P [8] check all [".h"] score 10;
		P [9] check all [".h"] score 10;
		P [10] check all [".h"] score 15;
		P [11] check all [".h"] score 15
	}
}
