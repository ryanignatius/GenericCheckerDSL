// Specification untuk soal knapsack pada paper
class Knapsack{
	/*
	 * variable declaration
	 * akan digunakan untuk men-generate atribut private,
	 * fungsi untuk membaca, menulis, dan validator variable tersebut
	 */
	
	// variable untuk input
	int n // n adalah variabel jumlah item
	int m // m adalah jumlah knapsack
	int[n] p // p adalah profit dari n buah item
	int[n] w // w adalah weight dari n buah item
	int[m] c // c adalah capacity dari m buah knapsack
	
	// variable untuk output
	int[n] y // y adalah nomor tempat knapsack item i atau 0 jika tidak dipilih
	int tp // tp adalah variable total profit
	
	/*
	 * input format
	 */
	format : input {
		1 (n,m) // 1 baris pertama berisi 2 buah integer n dan m
		1 (p<n>) // 1 baris berikutnya berisi n buah integer p
		1 (w<n>) // 1 baris berikutnya berisi n buah integer w
		1 (c<m>) // 1 baris berikutnya berisi m buah integer c
	}
	
	/*
	 * output format
	 */
	format : output {
		1 (y<n>) // 1 baris berikutnya berisi n buah integer y
		1 (tp) // 1 baris berikutnya berisi 1 buah integer tp
	}
	
	P 1 {
		// ans contains problem setter answer
		// out contains contestant output
		// in contains input test case
		//ans.tp == out.tp
		def int s1 = sum(p) where y[i]>0;
		s1 == tp;
		for (j,0,m) {
			def int sw = sum(w) where y[i]==j; 
			sw <= in.c[j]
		}
	}
	
	MR 1 {
		def int n1 = n-1;
		select(k,l:0..n1) where p[k]!=p[l] or w[k]!=w[l]
		followup {
			p` = swap(p,k,l);
			w` = swap(w,k,l);
			y` = swap(y,k,l)
		}
		check {
			tp` == tp
		}
		
	}
	
	MR 2 {
		def int n1 = n-1;
		select(k:0..n1) where y[k]==1;
		def int cc = random(0..100);
		def int nt = tp+cc
		followup {
			p`[k] = p[k]+cc
		}
		check {
			tp` == nt
		}
	}
	/*
	MR 3 {
		(select(k) where y[k]==0)
		def cc = (random(0..100))
		followup {
			(w`[k] = w[k]+cc)
		}
		check {
			
		}
	}
	
	MR 4 {
		(select(k) where y[k]==0)
		def cc = (random(0..100))
		followup {
			(p`[k] = p[k]-cc)
		}
		check {
			
		}
	}
	
	MR 5 {
		def c1 = (sum(w) where y[i]==1)
		followup {
			(c`[1] = c1)
		}
		check {
			
		}
	}
	
	MR 6 {
		def pnew = (min(p) where y[i] != 0)
		def wnew = (max(w) where y[i] != 0)
		followup {
			(n` = n+1)
			(p` = add(p,pnew))
			(w` = add(w,wnew))
		}
		check {
			(y` = add(y,0))
		}
	}
	
	MR 7 {
		(select(k) where y[k]==0)
		followup {
			(n` = n-1)
			(p` = remove(p,k))
			(w` = remove(w,k))
		}
		check {
			(y` = remove(y,k))
		}
	}
	
	MR 8 {
		(select(k) where y[k]==1)
		followup {
			(n` = n-1)
			(c`[1] = c[1]-w[k])
			(p` = remove(p,k))
			(w` = remove(w,k))
		}
		check {
			(tp` = tp-p[k])
			(y` = remove(y,k))
		}
	}
	
	MR 9 {
		(select(k,l) where 1<=k and k<l and l<=n and y[k]==1 and y[l]==1)
		followup {
			(p`[k] = p[k]+p[l])
			(w`[k] = w[k]+w[l])
			(n` = n-1)
			(p` = remove(p,l))
			(w` = remove(w,l))
		}
		check {
			(y` = remove(y,l))
		}
	}
	
	MR 10 {
		def v = (sum(p) where y[i]==1)
		followup {
			(p` = remove(p) where y[i]==1)
			(w` = remove(w) where y[i]==1)
			(n` = size(p))
			(c` = remove(c,0))
			(m` = m-1)
		}
		check {
			(y` = remove(y) where y[i]==1)
			(tp` = tp-v)
		}
	}
	*/
}
